// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tq-systems/public-go-utils/v3/device (interfaces: Info)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=../mocks/device/mock_device.go -package=device github.com/tq-systems/public-go-utils/v3/device Info
//

// Package device is a generated GoMock package.
package device

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInfo is a mock of Info interface.
type MockInfo struct {
	ctrl     *gomock.Controller
	recorder *MockInfoMockRecorder
}

// MockInfoMockRecorder is the mock recorder for MockInfo.
type MockInfoMockRecorder struct {
	mock *MockInfo
}

// NewMockInfo creates a new mock instance.
func NewMockInfo(ctrl *gomock.Controller) *MockInfo {
	mock := &MockInfo{ctrl: ctrl}
	mock.recorder = &MockInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfo) EXPECT() *MockInfoMockRecorder {
	return m.recorder
}

// GetDeviceType mocks base method.
func (m *MockInfo) GetDeviceType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeviceType indicates an expected call of GetDeviceType.
func (mr *MockInfoMockRecorder) GetDeviceType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceType", reflect.TypeOf((*MockInfo)(nil).GetDeviceType))
}

// GetFirmwareVersion mocks base method.
func (m *MockInfo) GetFirmwareVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirmwareVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFirmwareVersion indicates an expected call of GetFirmwareVersion.
func (mr *MockInfoMockRecorder) GetFirmwareVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirmwareVersion", reflect.TypeOf((*MockInfo)(nil).GetFirmwareVersion))
}

// GetHardwareRevision mocks base method.
func (m *MockInfo) GetHardwareRevision() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHardwareRevision")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHardwareRevision indicates an expected call of GetHardwareRevision.
func (mr *MockInfoMockRecorder) GetHardwareRevision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHardwareRevision", reflect.TypeOf((*MockInfo)(nil).GetHardwareRevision))
}

// GetIP mocks base method.
func (m *MockInfo) GetIP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIP")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIP indicates an expected call of GetIP.
func (mr *MockInfoMockRecorder) GetIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIP", reflect.TypeOf((*MockInfo)(nil).GetIP))
}

// GetMac mocks base method.
func (m *MockInfo) GetMac() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMac")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMac indicates an expected call of GetMac.
func (mr *MockInfoMockRecorder) GetMac() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMac", reflect.TypeOf((*MockInfo)(nil).GetMac))
}

// GetProductName mocks base method.
func (m *MockInfo) GetProductName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProductName indicates an expected call of GetProductName.
func (mr *MockInfoMockRecorder) GetProductName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductName", reflect.TypeOf((*MockInfo)(nil).GetProductName))
}

// GetSerial mocks base method.
func (m *MockInfo) GetSerial() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSerial")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSerial indicates an expected call of GetSerial.
func (mr *MockInfoMockRecorder) GetSerial() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSerial", reflect.TypeOf((*MockInfo)(nil).GetSerial))
}

// GetTimestampValidity mocks base method.
func (m *MockInfo) GetTimestampValidity() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestampValidity")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetTimestampValidity indicates an expected call of GetTimestampValidity.
func (mr *MockInfoMockRecorder) GetTimestampValidity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestampValidity", reflect.TypeOf((*MockInfo)(nil).GetTimestampValidity))
}

// GetTimezone mocks base method.
func (m *MockInfo) GetTimezone() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimezone")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimezone indicates an expected call of GetTimezone.
func (mr *MockInfoMockRecorder) GetTimezone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimezone", reflect.TypeOf((*MockInfo)(nil).GetTimezone))
}
