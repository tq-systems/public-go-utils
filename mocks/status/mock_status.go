// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tq-systems/public-go-utils/v3/status (interfaces: Handler)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=../mocks/status/mock_status.go -package=status github.com/tq-systems/public-go-utils/v3/status Handler
//

// Package status is a generated GoMock package.
package status

import (
	reflect "reflect"

	status "github.com/tq-systems/public-go-utils/v3/status"
	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// GetSafeMode mocks base method.
func (m *MockHandler) GetSafeMode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSafeMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetSafeMode indicates an expected call of GetSafeMode.
func (mr *MockHandlerMockRecorder) GetSafeMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSafeMode", reflect.TypeOf((*MockHandler)(nil).GetSafeMode))
}

// GetStatus mocks base method.
func (m *MockHandler) GetStatus() (status.SystemStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(status.SystemStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockHandlerMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockHandler)(nil).GetStatus))
}

// IsBusy mocks base method.
func (m *MockHandler) IsBusy() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBusy")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBusy indicates an expected call of IsBusy.
func (mr *MockHandlerMockRecorder) IsBusy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBusy", reflect.TypeOf((*MockHandler)(nil).IsBusy))
}

// SetStatus mocks base method.
func (m *MockHandler) SetStatus(arg0 status.SystemStatus) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockHandlerMockRecorder) SetStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockHandler)(nil).SetStatus), arg0)
}

// SetStatusIfIdle mocks base method.
func (m *MockHandler) SetStatusIfIdle(arg0 status.SystemStatus) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusIfIdle", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatusIfIdle indicates an expected call of SetStatusIfIdle.
func (mr *MockHandlerMockRecorder) SetStatusIfIdle(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusIfIdle", reflect.TypeOf((*MockHandler)(nil).SetStatusIfIdle), arg0)
}
